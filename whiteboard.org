* <2020-01-17>
** Plateforme ?
   Pb: Accessibilité d'un écosystème/environnement de développement.
- Stabilité
- Qualité:
  + portabilité
  + pédagogie
  + compatibilité
  + batterie de tests
- Mise à jour
- Ouvert
- Engagement
- Community driven
- Étude des profils d'utilisateurs
  + débutant
  + admin sys
  + expert
- Site web
- Windows/macOS/Linux
- Distribution
- CI/CD
- Policy
- Simplicité
- Scala/Haskell
- Interoptérabilité avec opam
- Passage à des paquets hors plateforme
** Produits
- Générateur d'installateurs
- Générateur de site
- Processus formalisé d'intégration
** Mail Théo
Le code pour générer l'installeur Windows est ici :
https://github.com/coq/coq/blob/master/dev/build/windows/makecoq_mingw.sh
C'est un très gros fichier shell, ça prend du temps à comprendre, mais
c'est bien structuré en fonctions, et il vaut mieux commencer par la
fin pour voir les fonctions qui sont appelées.  C'est complètement
ouvert aux évolutions, mais ça peut être une bonne base pour lancer
des tests à brève échéance.  En deux mots, ce script télécharge et
installe toutes les dépendances, y compris un environnement Cygwin
pour tout compiler.  Il est lancé depuis ce fichier auquel je ne
comprends rien si ce n'est qu'il contient la liste des extensions :
https://github.com/coq/coq/blob/master/dev/ci/gitlab.bat

Le code pour générer le paquet macOS est ici (beaucoup plus court, ne
contient pas d'extension, basé sur Homebrew) :
https://github.com/coq/coq/blob/55ded80878d47037e49ca9b60f89c422d184899f/azure-pipelines.yml#L41-L110

La discussion d'un paquet Snap avec les liens d'Enrico est ici :
https://github.com/coq/coq/issues/9289

Sur la plateforme Coq, il y a déjà ce brouillon de charte :
https://github.com/MSoegtropIMC/coq-platform/blob/master/charter.md

À lire également, les deux projets de stage qui contiennent quelques
informations et quelques liens :
- le stage technique sur les installeurs / le CI / CD :
  https://www.irif.fr/_media/users/theo/internship_proposal_platform_tech.pdf
- le stage de recherche sur le contrat social / la politique
  d'inclusion :
  https://www.irif.fr/_media/users/theo/internship_proposal_platform_social.pdf

À noter que les deux textes ne diffèrent qu'à partir de la section
"Objectives".

N'hésite pas à nous faire des retours écrits fréquents et à poser des
questions. On peut éventuellement mettre en place un chat si ça peut
être utile (type Gitter).
* <2020-01-20>
** Thoughts.
- Je veux que la plateforme installe Opam. Elle ne devrait pas avoir à
  installer des paquets en dehors de Opam, pour pouvoir assurer la
  transition plateforme -> Opam, et réutiliser l'infrastructure et les
  dépendances de manière transparente.
- La plateforme pourrait être un paquet Opam:
  + un meta-paquet 'ocaml-platform-meta' qui aurait comme dépendance
    tous les paquets inclus dans la plateforme;
  + un paquet 'ocaml-platform' qui contiendrait le vrai code de la
    plateforme. Par exemple, les scripts d'installation, de création
    des installeurs, de rendu du site web, etc.
  L'avantage, c'est que c'est très clair que cette plateforme *n'est
  pas une distribution downstream de paquets OCaml*, en particulier
  elle ne devrait pas avoir à supporter des patches des paquets
  qu'elle inclut. On garde toute l'infra de Opam, et si Opam est déjà
  installé, on peut s'en servir pour tester la plateforme.  Le paquet
  'ocaml-platform' n'est pas forcément nécessaire, mais pourquoi pas ?
- Différencie cette ocaml-platform d'un installateur++ pour Opam ?
  + Apparemment, Opam ne propose pas de binaire pour Windows ?
  + La plateforme fournit des versions précompilées des paquets
    supportés, alors que Opam est un gestionnaire de paquets source;
  + Support unifié de la documentation;
- Comment gérer les dépendances système ?  Par exemple Gtk. Sur une
  distribution Linux, on voudrait ne rien toucher et garder celle du
  système si ocaml-platform est installée par le gestionnaire de
  paquets ou par Opam, mais que se passe-t-il pour des images snap
  (etc...) ou pour Windows/macOS ? À mon avis, on peut garder
- Quelle fréquence de rebuild lors de mise à jour des paquets ?  Ça
  reste une grande question pour moi, c'est toujours le pb du semantic
  versionning. Je crois que le but n'est pas de faire une
  rolling-release, mais peut-être que les paquets mineurs pourraient
  être mis-à-jour régulièrement. Peut-être qu'on est pas obligé de
  faire un rebuild complet, par exemple avec des images Docker on doit
  pouvoir magouiller.
- Quelle fréquence de mise à jour par rapport à OCaml ?  La charte Coq
  a l'intention de se mettre à jour dans les 1 à 3 mois après une
  release de Coq.  Sauf erreur, OCaml n'introduit pas de breaking
  change, s'il n'y a pas d'erreur à la compilation on pourrait aller
  plus vite.
- Comment intégrer les paquets précompilés de la plateforme à ceux
  d'Opam (packet-pinning) et ceux du système ?
  + sans doute besoin de paquet pinning, locks sur les versions des
    dépendances à la NPM/Cargo (lock.toml);
  + lorsque la plateforme est installée standalone, elle pourrait
    décompresser une "image" d'Opam avec tous les paquets précompilés;
  + lorsqu'elle est installée via Opam, tout est pris en charge par le
    méta-paquet;
  + pas clair pour l'intégration avec le système... Que font les
    utilisateurs ? faut espérer que tout soit géré de manière
    transparente par Opam.
- Quel support comme système ?
  + pas de 32 bits, ça n'existe plus, c'est 2020 (sauf si gros
    besoin).
  + Windows 64 bits.
    * Les paquets OCaml ont-ils besoin d'une sous-couche POSIX ? Si
      oui, Cygwin est nécessaire, sinon ocamlc/mingw-w64 pourrait
      suffire pour compiler toute la pile.
      https://fdopen.github.io/opam-repository-mingw/
      https://github.com/fdopen/opam-repository-mingw
  + macOS.
    * Ne supporter que les dernières versions de macOS, si Apple le
      fait c'est suffisamment bien pour nous;
    * une fois qu'on aura ocaml-platform-meta, faudrait-il pousser
      tous ces paquets dans Homebrew ?
  + Linux.
    * Je suis pas très chaud pour réaliser une distribution binaire
      pour Linux, je pense que c'est mieux fait par le gestionnaire de
      paquets de la distribution. L'alternative (préférable ?) est une
      image Snap, AppImage, ou Flatpak.
- Quel mode de compilation pour les paquets ?
  + code natif ou bytecode;
  + niveau d'optimisation;
  + mode debug/release;
  + que fait Opam ?
- Quelle assurance de qualité pour les paquets ?
  + Utilisateurs;
  + Mainteneurs;
  + Reproducibilité;
  + Multi-plateforme.
** New thoughts.
- OCaml Platform pour l'utilisateur :
  + une distribution de OCaml (compilateur+runtime), du gestionnaire
    de paquets Opam, et d'un ensemble de paquets pré-sélectionnés;
  + portable sur Windows, macOS et Linux;
  + qui s'intègre dans le système hôte et dans une installation d'Opam;
  + user-friendly pour l'installation, l'usage, et la documentation
    interne et des paquets supportés;
  + extensible.
- Architecture de OCaml Platform :
  + essentiellement un meta-paquet de Opam (ocaml-platform-meta);
  + une collection de scripts pour construire les installateurs
    (ocaml-platform-scripts).
* <2020-01-21>
** Thoughts.
- Haskell Platform as a meta-package in distributions is essentially dead.
  https://github.com/haskell/haskell-platform/wiki/Distributions
  The meta-package has not been updated since 2014.
  Latest release (8.6.5) dates of May 2019.
  https://github.com/haskell/haskell-platform
- I couldn't find something similar in Scala.
- Haskell Platform est assez bien foutu.
  + build system incompréhensible;
  + intégration aux distributions est morte;
  + pas clair ce qu'ils font pour la doc et pour les dépendances
    externes.
- On peut fournir un environnement Cygwin, dans lequel on utilise
  ocaml-for-windows. Comme ça, on installe les dépendances extérieures
  des paquets OCaml dans Cygwin.
  + La question
- Grosse QUESTION: EST-CE QUE OPAM INSTALLE DES PAQUETS BINAIRES OU PAS.
** Construction de OCaml Platform for Windows
 Installation Windows dépendrait de Cygwin et de ocaml-for-windows.
  Tout se fait sous le dossier 'ocaml-platform' que j'appelle $root.
  1. Scripte l'installation Cygwin dans $root.
  2. Pour chaque paquet Opam qui a des dépendances externes, on
     installe le paquet de la dépendance via Cygwin, et si la
     dépendance n'est pas disponible sur Cygwin:
     + on upstream la dep sur Cygwin;
     + on compile *au préalable* la dep dans un environnement Cygwin,
       et on l'installe.
  3. Scripte l'installation de ocaml-for-windows dans l'environnement
     Cygwin.
  4. Pour chaque paquet
** Docker
Essentially, we can build everything in Docker.
https://docs.docker.com/develop/develop-images/dockerfile_best-practices/
Multi-staged builds.
- Fedora/Cygwin:
  https://copr.fedorainfracloud.org/coprs/yselkowitz/cygwin/
  https://hub.docker.com/_/fedora
  https://cygwin.com/faq.html#faq.programming.building-cygwin
** OCaml Platform
*** Les différents utilisateurs de OCaml Plateform
- L'utilisateur final, modèle grosse application self-contained.
  Téléchargeable depuis le site web. Typiquement: Bundle
  Cygwin,ocaml-repository-mingw,Opam; Bundle Snap/AppImage; Bundle
  macOS. Intègre les dépendances externes.
- L'utilisateur final / l'admin système, modèle gestionnaire de
  paquets de la distribution.
  Un meta-paquet pour chaque gestionnaire de paquets.
  + avantage, les dépendances externes sont gérées par le système de
    paquet de la distribution;
  + avantage, pas géré par Opam, donc pas de duplication de données
    dans les systèmes multi-utilisateur;
  + inconvénient, gestion des versions plus difficile;
  + inconvénient, besoin de mainteneur ou de scripting lourd pour
    gérer tous les systèmes de paquets;
  + Haskell a essayé, ils ont arrêté.
- L'utilisateur final, modèle à l'intérieur d'Opam.
  + inconvénient, pas de gestion des dépendances externes.
*** Ce dont on a besoin.
- Pour l'application lourde:
  + Windows: VM Windows ? Cross-compiler sur Docker ?
  + macOS: VM macOS ?
  + Linux: construire un snap, AppImage, Flatpak, ou un pré
* <2020-01-22>
Toute l'intégration est prise en charge par OCaml for Windows
(opam-repository-mingw).  Et si depext fonctionne c'est
extraordinaire, on a presque rien à faire.
https://github.com/protz/ocaml-installer
http://gallium.inria.fr/~scherer/gagallium/the-ocaml-installer-for-windows/
Installeur Windows:
+ NSIS apparemment plein de bugs,
+ Inno Setup: https://github.com/jrsoftware/issrc
http://ocamllabs.io/news
** Construction de Ocaml Platform for Windows
En fait Ocaml for Windows peut (presque) tout faire pour nous. On n'a
qu'à scripter un installateur.
*** Bundling or downloading
Je voudrais qu'on évite de tout packager dans l'installateur, ça
serait plus élégant de laisser l'installateur télécharger les paquets
via le gestionnaire de paquets.
+ Inno Setup et NSIS ne supportent pas trop ça.
+ Peut-être qu'un script d'installation en Power(S)hell ?
** OCaml Platform
*** Notes
- ocaml-platform-xxx: set of scripts to build the installer for system
  xxx.
- ocaml-platform-meta: an Opam package composed of curated OCaml
  packages.
- ocaml-platform-meta-depext: external dependencies of packages in
  ocaml-platform-meta. The list could be build with [[https://github.com/ocaml/opam-depext][opam-depext]].
- We don't do offline installers.
*** OCaml Platform for Windows
**** Projects used
- [[https://cygwin.com/][Cygwin]], a POSIX layer for Windows.
- [[https://fdopen.github.io/opam-repository-mingw/][opam-repository-mingw]], a fork of OCaml and Opam, targeting Windows
  and Cygwin.
- OPSpace: the local namespace where OCaml Platform is installed.
**** Installer steps
A PowerShell script could be used, because Inno Setup nor NSIS seem to
support downloads natively.
1. Download and setup Cygwin in $OPSpace.
2. Use the Cygwin package manager to install dependencies of OCaml for
   Windows, and install ocaml-platform-meta-depext.
3. Download and setup OCaml for Windows inside Cygwin (this installs
   OCaml and Opam).
4. Download and install a pre-build image of the Opam package tree
   with ocaml-platform-meta installed in it.
*** OCaml Platform for macOS
**** Projects used
- [[https://docs.brew.sh/][Homebrew]], a package manager for macOS.
**** Installer steps
1. Download and setup Homebrew in $OPSpace.
2. Use the brew package manager to install OCaml, Opam, and
   ocaml-platform-meta-depext.
3. Use Opam to install ocaml-platform-meta.
4. Download and install a pre-build image of the Opam package tree
   with ocaml-platform-meta installed in it.
*** OCaml Platform for Linux
**** Distribution
Use ocaml-platform-meta from the distribution, if it exists.
**** Opam
Use ocaml-platform-meta from Opam, if Opam is available.
**** Installer steps
1. Install a prebuild Opam/OCaml (from Opam website).
2. Download and install a pre-build image of the Opam package tree
   with ocaml-platform-meta installed in it.
3. Targz that.
**** Images
Use a prebuild Snap, AppImage, Flatpak. We should first aim for Snap
since its the default in Ubuntu.
